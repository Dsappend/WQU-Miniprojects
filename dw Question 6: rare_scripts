Does a practice's prescription costs originate from routine care or from reliance on rarely prescribed treatments? Commonplace treatments can carry lower costs than rare treatments because of efficiencies in large-scale production. While some specialist practices can't help but avoid prescribing rare medicines because there are no alternatives, some practices may be prescribing a unnecessary amount of brand-name products when generics are available. Let's identify practices whose costs disproportionately originate from rarely prescribed items.

First we have to identify which 'bnf_code' are rare. To do this, find the probability ùëù
of a prescription having a particular 'bnf_code' if the 'bnf_code' was randomly chosen from the unique options in the beneficiary data. We will call a 'bnf_code' rare if it is prescribed at a rate less than 0.1ùëù

.

p = 1 / scripts['bnf_code'].nunique()

print(p)

0.0005063291139240507

# rates = count / total

rates = scripts['bnf_code'].value_counts() / len(scripts)

rates.head()

0906040G0    0.014840
090402000    0.011016
0302000N0    0.010214
130201000    0.008839
0601060D0    0.008799
Name: bnf_code, dtype: float64

mask = rates < .1*p

rare_codes = rates[mask].index.unique()

rare_codes[:5]

Index(['1001030F0', '0503021E0', '239448100', '236001063', '0402010P0'], dtype='object')

len(mask)

1975

len(rare_codes)

844

scripts['rare'] = scripts['bnf_code'].isin(rare_codes).astype(int)

scripts.head()

	practice 	bnf_code 	bnf_name 	items 	nic 	act_cost 	quantity 	opioids 	rare
0 	N85639 	0106020C0 	Bisacodyl_Tab E/C 5mg 	1 	0.39 	0.47 	12 	0 	0
1 	N85639 	0106040M0 	Movicol Plain_Paed Pdr Sach 6.9g 	1 	4.38 	4.07 	30 	0 	0
2 	N85639 	0301011R0 	Salbutamol_Inha 100mcg (200 D) CFF 	1 	1.50 	1.40 	1 	0 	0
3 	N85639 	0304010G0 	Chlorphenamine Mal_Oral Soln 2mg/5ml 	1 	2.62 	2.44 	150 	0 	0
4 	N85639 	0401020K0 	Diazepam_Tab 2mg 	1 	0.16 	0.26 	6 	0 	0

scripts.rare.count()

973193

scripts.rare.sum()

11570

Now for each practice, calculate the proportion of costs that originate from prescription of rare treatments (i.e. rare 'bnf_code'). Use the 'act_cost' field for this calculation.

# rare script act_cost per practice / total act_cost per practice

rare_cost_prop = (scripts[scripts['rare']==1].groupby('practice')['act_cost'].sum()\

/ scripts.groupby('practice')['act_cost'].sum()).fillna(0)

rare_cost_prop.head()

practice
A81005    0.012017
A81007    0.008381
A81011    0.005116
A81012    0.013747
A81017    0.007359
Name: act_cost, dtype: float64

#rare_cost_prop = ...

Now we will calculate a z-score for each practice based on this proportion. First take the difference of rare_cost_prop and the proportion of costs originating from rare treatments across all practices.

relative_rare_cost_prop = (rare_cost_prop 

   - scripts[scripts['rare']==1]['act_cost'].sum() 

   / scripts['act_cost'].sum())

relative_rare_cost_prop.head()

practice
A81005   -0.003946
A81007   -0.007582
A81011   -0.010847
A81012   -0.002216
A81017   -0.008604
Name: act_cost, dtype: float64

Now we will estimate the standard errors (i.e. the denominator of the z-score) by simply taking the standard deviation of this difference.

standard_error = relative_rare_cost_prop.std()

standard_error

0.06050888706745139

relative_rare_cost_prop.head()

practice
A81005   -0.003946
A81007   -0.007582
A81011   -0.010847
A81012   -0.002216
A81017   -0.008604
Name: act_cost, dtype: float64

# List of unique practices

unique_practices = (practices

                    .sort_values('name')

                    .groupby('code')

                    .first()

                    .reset_index())[['code', 'name']]

‚Äã

unique_practices.set_index('code', inplace=True)

unique_practices.head()

	name
code 	
A81001 	THE DENSHAM SURGERY
A81002 	QUEENS PARK MEDICAL CENTRE
A81003 	VICTORIA MEDICAL PRACTICE
A81004 	BLUEBELL MEDICAL CENTRE
A81005 	SPRINGWOOD SURGERY

rare_scores = (relative_rare_cost_prop / standard_error)

rare_scores = pd.concat([unique_practices, rare_scores], axis = 1)\

.sort_values('act_cost', ascending = False).head(100)

/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version
of pandas will change to not sort by default.

To accept the future behavior, pass 'sort=False'.

To retain the current behavior and silence the warning, pass 'sort=True'.

  """Entry point for launching an IPython kernel.

Finally compute the z-scores. Return the practices with the top 100 z-scores in the form (post_code, practice_name, z-score). Note that some practice codes will correspond with multiple names. In this case, use the first match when sorting names alphabetically.

rare_scores.head()

	name 	act_cost
Y03472 	CONSULTANT DIABETES TEAM 	16.262687
Y05320 	DMC COMMUNITY DERMATOLOGY RBWF 	15.128648
Y04404 	OUTPATIENTS JUBILEE HEALTH CENTRE 	7.542139
Y03484 	DMC COMMUNITY DERMATOLOGY CLINIC 	7.287222
Y04424 	DMC HEALTHCARE 	6.838614

rare_scripts = list(rare_scores.itertuples(name=None))

rare_scripts[:3]

[('Y03472', 'CONSULTANT DIABETES TEAM', 16.262687124655073),
 ('Y05320', 'DMC COMMUNITY DERMATOLOGY RBWF', 15.128648195416869),
 ('Y04404', 'OUTPATIENTS JUBILEE HEALTH CENTRE', 7.54213935610462)]

#rare_scripts = [("Y03472", "CONSULTANT DIABETES TEAM", 16.2626871247)] * 100
