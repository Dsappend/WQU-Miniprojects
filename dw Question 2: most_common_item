We can also easily compute summary statistics on groups within the data. In the pw miniproject we had to explicitly construct the groups based on the values of a particular field. Pandas will handle that for us via the groupby method. This process is detailed in the Pandas documentation.

Use groupby to calculate the total number of items dispensed for each 'bnf_name'. Find the item with the highest total and return the result as [(bnf_name, total)].

scripts.head()

	practice 	bnf_code 	bnf_name 	items 	nic 	act_cost 	quantity
0 	N85639 	0106020C0 	Bisacodyl_Tab E/C 5mg 	1 	0.39 	0.47 	12
1 	N85639 	0106040M0 	Movicol Plain_Paed Pdr Sach 6.9g 	1 	4.38 	4.07 	30
2 	N85639 	0301011R0 	Salbutamol_Inha 100mcg (200 D) CFF 	1 	1.50 	1.40 	1
3 	N85639 	0304010G0 	Chlorphenamine Mal_Oral Soln 2mg/5ml 	1 	2.62 	2.44 	150
4 	N85639 	0401020K0 	Diazepam_Tab 2mg 	1 	0.16 	0.26 	6

totals = scripts.groupby('bnf_name')['items'].sum()

totals.head()

bnf_name
365 Film 10cm x 12cm VP Adh Film Dress      2
365 Non Adherent 10cm x 10cm Pfa Plas Fa    3
365 Non Adherent 10cm x 20cm Pfa Plas Fa    1
365 Non Woven Island 8cm x 10cm Adh Dres    1
365 Transpt Island 5cm x 7.2cm VP Adh Fi    2
Name: items, dtype: int64

totals.sort_values().tail()

bnf_name
Amlodipine_Tab 5mg         128245
Simvastatin_Tab 40mg       132941
Aspirin Disper_Tab 75mg    148591
Paracet_Tab 500mg          151669
Omeprazole_Cap E/C 20mg    218583
Name: items, dtype: int64

totals.idxmax()

'Omeprazole_Cap E/C 20mg'

most_common_item = [(totals.idxmax(), totals.idxmax())]

most_common_item

[('Omeprazole_Cap E/C 20mg', 'Omeprazole_Cap E/C 20mg')]

most_common_item = [(totals.sort_values().tail(1).index[0],

                    totals.sort_values().tail(1).values[0])]

most_common_item

[('Omeprazole_Cap E/C 20mg', 218583)]

totals.sort_values().tail(1).values[0]

218583
