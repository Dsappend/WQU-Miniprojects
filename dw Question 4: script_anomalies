Drug abuse is a source of human and monetary costs in health care. A first step in identifying practitioners that enable drug abuse is to look for practices where commonly abused drugs are prescribed unusually often. Let's try to find practices that prescribe an unusually high amount of opioids. The opioids we'll look for are given in the list below.

opioids = ['morphine', 'oxycodone', 'methadone', 'fentanyl', 

           'pethidine', 'buprenorphine', 

           'propoxyphene', 'codeine']

'|'.join(opioids)

'morphine|oxycodone|methadone|fentanyl|pethidine|buprenorphine|propoxyphene|codeine'

These are generic names for drugs, not brand names. Generic drug names can be found using the 'bnf_code' field in scripts along with the chem table.. Use the list of opioids provided above along with these fields to make a new field in the scripts data that flags whether the row corresponds with a opioid prescription.

mask = chem['NAME'].str.contains('|'.join(opioids), case=False)

opioids_codes = chem[mask]['CHEM SUB']

opioids_codes.head()

88     0104020D0
91     0104020N0
691    0309010C0
693    0309010N0
695    0309010S0
Name: CHEM SUB, dtype: object

scripts['opioids'] = scripts['bnf_code'].isin(opioids_codes).astype(int)

scripts.head()

	practice 	bnf_code 	bnf_name 	items 	nic 	act_cost 	quantity 	opioids 	rare
0 	N85639 	0106020C0 	Bisacodyl_Tab E/C 5mg 	1 	0.39 	0.47 	12 	0 	0
1 	N85639 	0106040M0 	Movicol Plain_Paed Pdr Sach 6.9g 	1 	4.38 	4.07 	30 	0 	0
2 	N85639 	0301011R0 	Salbutamol_Inha 100mcg (200 D) CFF 	1 	1.50 	1.40 	1 	0 	0
3 	N85639 	0304010G0 	Chlorphenamine Mal_Oral Soln 2mg/5ml 	1 	2.62 	2.44 	150 	0 	0
4 	N85639 	0401020K0 	Diazepam_Tab 2mg 	1 	0.16 	0.26 	6 	0 	0

Now for each practice calculate the proportion of its prescriptions containing opioids.

Hint: Consider the following list: [0, 1, 1, 0, 0, 0]. What proportion of the entries are 1s? What is the mean value?

scripts.groupby('practice')['opioids'].mean().head()

practice
A81005    0.033179
A81007    0.043329
A81011    0.046556
A81012    0.042793
A81017    0.038140
Name: opioids, dtype: float64

opioids_per_practice = scripts.groupby('practice')['opioids'].mean()

opioids_per_practice.head()

practice
A81005    0.033179
A81007    0.043329
A81011    0.046556
A81012    0.042793
A81017    0.038140
Name: opioids, dtype: float64

scripts['opioids'].mean()

0.03580276471367961

How do these proportions compare to the overall opioid prescription rate? Subtract off the proportion of all prescriptions that are opioids from each practice's proportion.

relative_opioids_per_practice = (opioids_per_practice 

                                 - scripts['opioids'].mean())

relative_opioids_per_practice.head()

practice
A81005   -0.002624
A81007    0.007526
A81011    0.010753
A81012    0.006990
A81017    0.002337
Name: opioids, dtype: float64

Now that we know the difference between each practice's opioid prescription rate and the overall rate, we can identify which practices prescribe opioids at above average or below average rates. However, are the differences from the overall rate important or just random deviations? In other words, are the differences from the overall rate big or small?

To answer this question we have to quantify the difference we would typically expect between a given practice's opioid prescription rate and the overall rate. This quantity is called the standard error, and is related to the standard deviation, ùúé

. The standard error in this case is

ùúéùëõ‚éØ‚éØ‚àö

where ùëõ

is the number of prescriptions each practice made. Calculate the standard error for each practice. Then divide relative_opioids_per_practice by the standard errors. We'll call the final result opioid_scores.

scripts.head()

	practice 	bnf_code 	bnf_name 	items 	nic 	act_cost 	quantity 	opioids 	rare
0 	N85639 	0106020C0 	Bisacodyl_Tab E/C 5mg 	1 	0.39 	0.47 	12 	0 	0
1 	N85639 	0106040M0 	Movicol Plain_Paed Pdr Sach 6.9g 	1 	4.38 	4.07 	30 	0 	0
2 	N85639 	0301011R0 	Salbutamol_Inha 100mcg (200 D) CFF 	1 	1.50 	1.40 	1 	0 	0
3 	N85639 	0304010G0 	Chlorphenamine Mal_Oral Soln 2mg/5ml 	1 	2.62 	2.44 	150 	0 	0
4 	N85639 	0401020K0 	Diazepam_Tab 2mg 	1 	0.16 	0.26 	6 	0 	0

‚Äã

np.sqrt(scripts['opioids'].var()

        / scripts['practice'].value_counts()).head()

N83028    0.003484
L83100    0.003513
D81043    0.003747
B81008    0.003796
B81026    0.003835
Name: practice, dtype: float64

standard_error_per_practice = np.sqrt(scripts['opioids'].var()

                                      / scripts['practice'].value_counts())

opioid_scores = relative_opioids_per_practice / standard_error_per_practice 

The quantity we have calculated in opioid_scores is called a z-score:

ùëã¬Ø‚àíùúáùúé2/ùëõ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚àö

Here ùëã¬Ø
corresponds with the proportion for each practice, ùúá corresponds with the proportion across all practices, ùúé2 corresponds with the variance of the proportion across all practices, and ùëõ is the number of prescriptions made by each practice. Notice ùëã¬Ø and ùëõ will be different for each practice, while ùúá and ùúé

are determined across all prescriptions, and so are the same for every z-score. The z-score is a useful statistical tool used for hypothesis testing, finding outliers, and comparing data about different types of objects or events.

Now that we've calculated this statistic, take the 100 practices with the largest z-score. Return your result as a list of tuples in the form (practice_name, z-score, number_of_scripts). Sort your tuples by z-score in descending order. Note that some practice codes will correspond with multiple names. In this case, use the first match when sorting names alphabetically.

practices.code.nunique()

10843

unique_practices = (practices

                    .sort_values(['code', 'name'])

                    .drop_duplicates(subset=['code'], keep='first'))

unique_practices = unique_practices[['code', 'name']]

unique_practices.head()

	code 	name
0 	A81001 	THE DENSHAM SURGERY
1 	A81002 	QUEENS PARK MEDICAL CENTRE
2 	A81003 	VICTORIA MEDICAL PRACTICE
11915 	A81004 	BLUEBELL MEDICAL CENTRE
4 	A81005 	SPRINGWOOD SURGERY

scripts['practice'].value_counts().head()

N83028    2844
L83100    2797
D81043    2459
B81008    2396
B81026    2347
Name: practice, dtype: int64

results = unique_practices.merge(opioid_scores.rename('score'), 

                                 left_on='code', 

                                 right_index=True)

‚Äã

results = results.merge(scripts['practice'].value_counts().rename('count'),

                       left_on='code', right_index=True)

‚Äã

results.sort_values(by='score', ascending=False, inplace=True)

‚Äã

results.drop('code', axis=1, inplace=True)

‚Äã

results.head()

	name 	score 	count
7954 	NATIONAL ENHANCED SERVICE 	11.695818 	7
8456 	OUTREACH SERVICE NH / RH 	7.339043 	2
8783 	BRISDOC HEALTHCARE SERVICES OOH 	6.150582 	60
7454 	H&R P C SPECIAL SCHEME 	5.123032 	36
9718 	HMR BARDOC OOH 	4.958866 	321

anomalies = list(results.itertuples(index=False, name=None))[:100]

anomalies[:2]

[('NATIONAL ENHANCED SERVICE', 11.695817862936027, 7),
 ('OUTREACH SERVICE NH / RH', 7.339043019238823, 2)]

unique_practices = ...

#anomalies = [("NATIONAL ENHANCED SERVICE", 11.6958178629, 7)] * 100
