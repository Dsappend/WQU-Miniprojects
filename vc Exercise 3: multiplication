Within linear algebra there's many different kinds of multiplication: scalar multiplication, inner product, cross product, and matrix product. We're going to implement scalar multiplication and the inner product.

We can define scalar multiplication given a point 𝑃
and a scalar 𝑎 as
𝑎𝑃=𝑎(𝑥,𝑦)=(𝑎𝑥,𝑎𝑦)

and we can define the inner product for points 𝑃,𝑄
as
𝑃⋅𝑄=(𝑥1,𝑦1)⋅(𝑥2,𝑦2)=𝑥1𝑥2+𝑦1𝑦2

To test that you've implemented this correctly, compute 2(𝑥,𝑦)⋅(𝑥,𝑦)

for a Point object. Once this is done, execute the grader.score cell for this question (do not edit that cell; you only need to modify the Point class.)

(Remember that __mul__ method will allow us to use the * operator. Also don't forget that the ordering of operands matters when implementing these operators.)

class Point(object):

​

    def __init__(self, x, y):

        self.x = x

        self.y = y

    

    def __add__(self, other):

        return Point(self.x + other.x,

                     self.y + other.y)

    

    def __sub__(self, other):

        return Point(self.x - other.x,

                     self.y - other.y)

    

    def __mul__(self, other):

        if isinstance (other, Point):

            return self.x * other.x + self.y * other.y

        elif isinstance (other,  (int, float)):

            return Point(

                self.x * other,

                self.y * other

            )

        else:

            raise ValueError('other must be numeric or type Point.') 

    

    def __repr__(self):

        return f'Point({self.x}, { self.y})'

Point(1,2)*9

Point(9, 18)

Point(1,2)* Point(1,3)

7

Point(1,2)*'Hello'

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-13-f0eb16431181> in <module>()
----> 1 Point(1,2)*'Hello'

<ipython-input-10-f72af26cdf53> in __mul__(self, other)
     22             )
     23         else:
---> 24             raise ValueError('other must be numeric or type Point.')
     25 
     26     def __repr__(self):

ValueError: other must be numeric or type Point.

def mult_result(points):

    points = [Point(*point) for point in points]

    return [point*point*2 for point in points]

​

grader.score.vc__multiplication(mult_result)
